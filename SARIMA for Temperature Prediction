from statsmodels.graphics.tsaplots import plot_pacf
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa.stattools import pacf,acf
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.stattools import adfuller
import matplotlib.pyplot as plt
from tqdm import tqdm_notebook
import numpy as np
import pandas as pd

from itertools import product

import warnings
warnings.filterwarnings('ignore')

%matplotlib inline



df = pd.read_csv(r'C:\Users\muhammad.usman38\Downloads\83163_1980_1_1_2020.csv')
df.head()


df.dtypes

df['Calculated_Date'] = df[['year', 'month', 'day']].apply(lambda x: '{}-{}-{}'.format(x[0], x[1], x[2]), axis=1)

df['Calculated_Date'].head()

df['Calculated_Date'] = pd.to_datetime(df['Calculated_Date'])
df['meanTemp'] = pd.to_numeric(df['meanTemp'])
df = df.drop(labels=['COOPID','year','month','day'], axis=1)
df.head()

import plotly.graph_objects as go

import pandas as pd



# Create figure
fig = go.Figure()

fig.add_trace(
    go.Scatter(x =df['Calculated_Date'],y = df['meanTemp'])

# # Set title
# fig.update_layout(
#     title_text="Time series with range slider and selectors"
 )

# Add range slider
fig.update_layout(
    xaxis=dict(
        rangeselector=dict(
            buttons=list([
                dict(count=1,
                     label="1m",
                     step="month",
                     stepmode="backward"),
                dict(count=6,
                     label="6m",
                     step="month",
                     stepmode="backward"),
                dict(count=1,
                     label="YTD",
                     step="year",
                     stepmode="todate"),
                dict(count=1,
                     label="1y",
                     step="year",
                     stepmode="backward"),
                dict(step="all")
            ])
        ),
        rangeslider=dict(
            visible=True
        ),
        type="date"
    )
)

fig.show()


plot_pacf(df['meanTemp']);
plot_acf(df['meanTemp']);

from statsmodels.tsa.stattools import pacf,acf
import plotly.graph_objects as go

df_pacf = pacf(df['meanTemp'], nlags=300)
fig = go.Figure()
fig.add_trace(go.Scatter(
    x= np.arange(len(df_pacf)),
    y= df_pacf,
    name= 'PACF',
    ))
fig.update_xaxes(rangeslider_visible=True)
fig.update_layout(
    title="Partial Autocorrelation",
    xaxis_title="Lag",
    yaxis_title="Partial Autocorrelation",
         height=500,
    )
fig.show()


df_acf = acf(df['meanTemp'], nlags=300)
fig = go.Figure()
fig.add_trace(go.Scatter(
    x= np.arange(len(df_acf)),
    y= df_acf,
    name= 'ACF',
    ))
fig.update_xaxes(rangeslider_visible=True)
fig.update_layout(
    title="Autocorrelation",
    xaxis_title="Lag",
    yaxis_title="Autocorrelation",
         height=500,
    )
fig.show()

ad_fuller_result = adfuller(df['meanTemp'])
print(f'ADF Statistic: {ad_fuller_result[0]}')
print(f'p-value: {ad_fuller_result[1]}')

plt.hist(df['meanTemp'])
plt.show()

import plotly.express as px

fig = px.histogram(df, x=df['meanTemp'])
fig.update_xaxes(rangeslider_visible=True)
fig.show()


def optimize_SARIMA(parameters_list, d, D, s, exog):
    
    results = []
    
    for param in tqdm_notebook(parameters_list):
        try: 
            model = SARIMAX(exog, order=(param[0], d, param[1]), seasonal_order=(param[2], D, param[3], s)).fit(disp=-1)
        except:
            continue
            
        aic = model.aic
        results.append([param, aic])
        
    result_df = pd.DataFrame(results)
    result_df.columns = ['(p,q)x(P,Q)', 'AIC']
    #Sort in ascending order, lower AIC is better
    result_df = result_df.sort_values(by='AIC', ascending=True).reset_index(drop=True)
    
    return result_df
		
		
p = range(0, 3, 1)
d = 1
q = range(0, 3, 1)
P = range(0, 3, 1)
D = 1
Q = range(0, 3, 1)
s = 2
parameters = product(p, q, P, Q)
parameters_list = list(parameters)
print(len(parameters_list))

result_df = optimize_SARIMA(parameters_list, 1, 1, 3, df['meanTemp'])
result_df


best_model = SARIMAX(df['meanTemp'], order=(1, 1, 2), seasonal_order=(0, 1, 2, 12)).fit(dis=-1)
print(best_model.summary())


best_model.plot_diagnostics(figsize=(18, 8))
plt.show()


df['arima_model'] = best_model.fittedvalues
df['arima_model'][0:1] = np.NaN
forecast = best_model.predict(start=df.shape[0], end=df.shape[0] + 180)
forecast = df['arima_model'].append(forecast)

plt.figure(figsize=(15, 7.5))
plt.plot(forecast, color='r', label='model')
plt.plot(df['meanTemp'], label='actual')
plt.legend()
plt.show()


import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Scatter(x=df["Calculated_Date"], y=df["meanTemp"], name="Actual", mode="lines"))
fig.add_trace(go.Scatter(x=df["Calculated_Date"], y=df["arima_model"], name="Forecast", mode="lines"))
fig.update_layout(
    title="Model reults", xaxis_title="Date", yaxis_title="Temp"
)
fig.update_xaxes(rangeslider_visible=True)
fig.show()
